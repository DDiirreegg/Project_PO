#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Project_PO
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Project")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertUsers(Users instance);
    partial void UpdateUsers(Users instance);
    partial void DeleteUsers(Users instance);
    partial void InsertTables(Tables instance);
    partial void UpdateTables(Tables instance);
    partial void DeleteTables(Tables instance);
    partial void InsertReservations(Reservations instance);
    partial void UpdateReservations(Reservations instance);
    partial void DeleteReservations(Reservations instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::Project_PO.Properties.Settings.Default.ProjectConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Users> Users
		{
			get
			{
				return this.GetTable<Users>();
			}
		}
		
		public System.Data.Linq.Table<Tables> Tables
		{
			get
			{
				return this.GetTable<Tables>();
			}
		}
		
		public System.Data.Linq.Table<Reservations> Reservations
		{
			get
			{
				return this.GetTable<Reservations>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class Users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idk;
		
		private string _login;
		
		private string _pass;
		
		private string _namek;
		
		private string _snamek;
		
		private EntitySet<Reservations> _Reservations;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidkChanging(int value);
    partial void OnidkChanged();
    partial void OnloginChanging(string value);
    partial void OnloginChanged();
    partial void OnpassChanging(string value);
    partial void OnpassChanged();
    partial void OnnamekChanging(string value);
    partial void OnnamekChanged();
    partial void OnsnamekChanging(string value);
    partial void OnsnamekChanged();
    #endregion
		
		public Users()
		{
			this._Reservations = new EntitySet<Reservations>(new Action<Reservations>(this.attach_Reservations), new Action<Reservations>(this.detach_Reservations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idk", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idk
		{
			get
			{
				return this._idk;
			}
			set
			{
				if ((this._idk != value))
				{
					this.OnidkChanging(value);
					this.SendPropertyChanging();
					this._idk = value;
					this.SendPropertyChanged("idk");
					this.OnidkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_login", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string login
		{
			get
			{
				return this._login;
			}
			set
			{
				if ((this._login != value))
				{
					this.OnloginChanging(value);
					this.SendPropertyChanging();
					this._login = value;
					this.SendPropertyChanged("login");
					this.OnloginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pass", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string pass
		{
			get
			{
				return this._pass;
			}
			set
			{
				if ((this._pass != value))
				{
					this.OnpassChanging(value);
					this.SendPropertyChanging();
					this._pass = value;
					this.SendPropertyChanged("pass");
					this.OnpassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_namek", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string namek
		{
			get
			{
				return this._namek;
			}
			set
			{
				if ((this._namek != value))
				{
					this.OnnamekChanging(value);
					this.SendPropertyChanging();
					this._namek = value;
					this.SendPropertyChanged("namek");
					this.OnnamekChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_snamek", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string snamek
		{
			get
			{
				return this._snamek;
			}
			set
			{
				if ((this._snamek != value))
				{
					this.OnsnamekChanging(value);
					this.SendPropertyChanging();
					this._snamek = value;
					this.SendPropertyChanged("snamek");
					this.OnsnamekChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Reservations", Storage="_Reservations", ThisKey="idk", OtherKey="idk")]
		public EntitySet<Reservations> Reservations
		{
			get
			{
				return this._Reservations;
			}
			set
			{
				this._Reservations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Reservations(Reservations entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_Reservations(Reservations entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tables")]
	public partial class Tables : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idt;
		
		private string _namet;
		
		private EntitySet<Reservations> _Reservations;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidtChanging(int value);
    partial void OnidtChanged();
    partial void OnnametChanging(string value);
    partial void OnnametChanged();
    #endregion
		
		public Tables()
		{
			this._Reservations = new EntitySet<Reservations>(new Action<Reservations>(this.attach_Reservations), new Action<Reservations>(this.detach_Reservations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idt", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idt
		{
			get
			{
				return this._idt;
			}
			set
			{
				if ((this._idt != value))
				{
					this.OnidtChanging(value);
					this.SendPropertyChanging();
					this._idt = value;
					this.SendPropertyChanged("idt");
					this.OnidtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_namet", DbType="NVarChar(3) NOT NULL", CanBeNull=false)]
		public string namet
		{
			get
			{
				return this._namet;
			}
			set
			{
				if ((this._namet != value))
				{
					this.OnnametChanging(value);
					this.SendPropertyChanging();
					this._namet = value;
					this.SendPropertyChanged("namet");
					this.OnnametChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tables_Reservations", Storage="_Reservations", ThisKey="idt", OtherKey="idt")]
		public EntitySet<Reservations> Reservations
		{
			get
			{
				return this._Reservations;
			}
			set
			{
				this._Reservations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Reservations(Reservations entity)
		{
			this.SendPropertyChanging();
			entity.Tables = this;
		}
		
		private void detach_Reservations(Reservations entity)
		{
			this.SendPropertyChanging();
			entity.Tables = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Reservations")]
	public partial class Reservations : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idr;
		
		private int _idt;
		
		private System.DateTime _day;
		
		private System.TimeSpan _time;
		
		private int _namber;
		
		private int _idk;
		
		private EntityRef<Tables> _Tables;
		
		private EntityRef<Users> _Users;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidrChanging(int value);
    partial void OnidrChanged();
    partial void OnidtChanging(int value);
    partial void OnidtChanged();
    partial void OndayChanging(System.DateTime value);
    partial void OndayChanged();
    partial void OntimeChanging(System.TimeSpan value);
    partial void OntimeChanged();
    partial void OnnamberChanging(int value);
    partial void OnnamberChanged();
    partial void OnidkChanging(int value);
    partial void OnidkChanged();
    #endregion
		
		public Reservations()
		{
			this._Tables = default(EntityRef<Tables>);
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idr", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idr
		{
			get
			{
				return this._idr;
			}
			set
			{
				if ((this._idr != value))
				{
					this.OnidrChanging(value);
					this.SendPropertyChanging();
					this._idr = value;
					this.SendPropertyChanged("idr");
					this.OnidrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idt", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int idt
		{
			get
			{
				return this._idt;
			}
			set
			{
				if ((this._idt != value))
				{
					if (this._Tables.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidtChanging(value);
					this.SendPropertyChanging();
					this._idt = value;
					this.SendPropertyChanged("idt");
					this.OnidtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_day", DbType="Date NOT NULL")]
		public System.DateTime day
		{
			get
			{
				return this._day;
			}
			set
			{
				if ((this._day != value))
				{
					this.OndayChanging(value);
					this.SendPropertyChanging();
					this._day = value;
					this.SendPropertyChanged("day");
					this.OndayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_time", DbType="Time NOT NULL")]
		public System.TimeSpan time
		{
			get
			{
				return this._time;
			}
			set
			{
				if ((this._time != value))
				{
					this.OntimeChanging(value);
					this.SendPropertyChanging();
					this._time = value;
					this.SendPropertyChanged("time");
					this.OntimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_namber", DbType="Int NOT NULL")]
		public int namber
		{
			get
			{
				return this._namber;
			}
			set
			{
				if ((this._namber != value))
				{
					this.OnnamberChanging(value);
					this.SendPropertyChanging();
					this._namber = value;
					this.SendPropertyChanged("namber");
					this.OnnamberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idk", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int idk
		{
			get
			{
				return this._idk;
			}
			set
			{
				if ((this._idk != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidkChanging(value);
					this.SendPropertyChanging();
					this._idk = value;
					this.SendPropertyChanged("idk");
					this.OnidkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tables_Reservations", Storage="_Tables", ThisKey="idt", OtherKey="idt", IsForeignKey=true)]
		public Tables Tables
		{
			get
			{
				return this._Tables.Entity;
			}
			set
			{
				Tables previousValue = this._Tables.Entity;
				if (((previousValue != value) 
							|| (this._Tables.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tables.Entity = null;
						previousValue.Reservations.Remove(this);
					}
					this._Tables.Entity = value;
					if ((value != null))
					{
						value.Reservations.Add(this);
						this._idt = value.idt;
					}
					else
					{
						this._idt = default(int);
					}
					this.SendPropertyChanged("Tables");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Reservations", Storage="_Users", ThisKey="idk", OtherKey="idk", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.Reservations.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.Reservations.Add(this);
						this._idk = value.idk;
					}
					else
					{
						this._idk = default(int);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
